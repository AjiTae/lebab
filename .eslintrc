{
  "parserOptions": {
    "ecmaVersion": 6,
    "sourceType": "module"
  },
  "env": {
    "node": true,
    "mocha": true
  },
  "rules": {
    // # Possible errors
    //
    // disallow assignment in conditional expressions
    "no-cond-assign": 2,
    // disallow use of console.log()
    "no-console": 2,
    // disallow use of constant expressions in conditions
    "no-constant-condition": 2,
    // disallow control characters in regular expressions
    "no-control-regex": 2,
    // disallow use of debugger
    "no-debugger": 2,
    // disallow duplicate arguments in functions
    "no-dupe-args": 2,
    // disallow duplicate keys when creating object literals
    "no-dupe-keys": 2,
    // disallow a duplicate switch case label
    "no-duplicate-case": 2,
    // disallow empty block statements
    "no-empty": 2,
    // disallow the use of empty character classes in regular expressions
    "no-empty-character-class": 2,
    // disallow assigning to the exception in a catch block
    "no-ex-assign": 2,
    // disallow double-negation boolean casts in a boolean context
    "no-extra-boolean-cast": 2,
    // disallow unnecessary semicolons
    "no-extra-semi": 2,
    // disallow overwriting functions written as function declarations
    "no-func-assign": 2,
    // disallow function or variable declarations in nested blocks
    "no-inner-declarations": 2,
    // disallow invalid regular expression strings in the RegExp constructor
    "no-invalid-regexp": 2,
    // disallow irregular whitespace outside of strings and comments
    "no-irregular-whitespace": 2,
    // disallow negation of the left operand of an in expression
    "no-negated-in-lhs": 2,
    // disallow the use of object properties of the global object (Math and JSON) as functions
    "no-obj-calls": 2,
    // disallow multiple spaces in a regular expression literal
    "no-regex-spaces": 2,
    // disallow sparse arrays
    "no-sparse-arrays": 2,
    // Avoid code that looks like two expressions but is actually one
    "no-unexpected-multiline": 2,
    // disallow unreachable statements after a return, throw, continue, or break statement
    "no-unreachable": 2,
    // disallow comparisons with the value NaN
    "use-isnan": 2,
    // ensure that the results of typeof are compared against a valid string
    "valid-typeof": 2,

    // # Best practices
    //
    // require curly braces for all control statements
    "curly": 2,
    // require the use of === and !==
    "eqeqeq": 2,
    // disallow use of arguments.caller or arguments.callee
    "no-caller": 2,
    // disallow lexical declarations in case clauses
    "no-case-declarations": 2,
    // disallow use of eval()
    "no-eval": 2,
    // disallow fallthrough of case statements
    "no-fallthrough": 2,
    // disallow creation of functions within loops
    "no-loop-func": 2,
    // disallow use of multiline strings
    "no-multi-str": 2,
    // disallow use of octal literals
    "no-octal": 2,
    // disallow usage of __proto__ property
    "no-proto": 2,
    // disallow declaring the same variable more than once
    "no-redeclare": 2,
    // disallow use of javascript: urls
    "no-script-url": 2,
    // disallow assignments where both sides are exactly the same
    "no-self-assign": 2,
    // disallow usage of expressions in statement position
    "no-unused-expressions": 2,
    // disallow unused labels
    "no-unused-labels": 2,
    // require immediate function invocation to be wrapped in parentheses
    "wrap-iife": 2,

    // # Variables
    //
    // disallow deletion of variables
    "no-delete-var": 2,
    // disallow use of undeclared variables
    "no-undef": 2,
    // disallow declaration of variables that are not used in the code
    "no-unused-vars": 2,

    // # Stylistic issues
    //
    // require camel case names
    "camelcase": 2,
    // require commas at end of line (no comma-first style)
    "comma-style": 2,
    // require foo.bar instead of foo['bar']
    "dot-notation": 2,
    // require indentation of 2 spaces
    "indent": [2, 2],
    // require a capital letter for constructors
    "new-cap": 2,
    // disallow the omission of parentheses when invoking a constructor with no arguments
    "new-parens": 2,
    // disallow use of bitwise operators
    "no-bitwise": 2,
    // disallow the use of the Object constructor
    "no-new-object": 2,
    // disallow use of the with statement
    "no-with": 2,
    // require use of 'single-quotes'
    "quotes": [2, "single"],
    // require semicolons
    "semi": 2,

    // # ECMAScript 6
    //
    // verify calls of super() in constructors
    "constructor-super": 2,
    // disallow modifying variables of class declarations
    "no-class-assign": 2,
    // disallow modifying variables that are declared using const
    "no-const-assign": 2,
    // disallow duplicate name in class members
    "no-dupe-class-members": 2,
    // disallow use of the new operator with the Symbol object
    "no-new-symbol": 2,
    // disallow use of this/super before calling super() in constructors
    "no-this-before-super": 2,
    // disallow generator functions that do not have yield
    "require-yield": 2,
  }
}
